"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from smartcar.models import operations

class EVs:
    r"""Operations about electric vehicles"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_battery_capacity(self, request: operations.GetBatteryCapacityRequest) -> operations.GetBatteryCapacityResponse:
        r"""EV Battery Capacity
        __Description__
        
        Returns the total capacity of an electric vehicle's battery.
        
        __Permission__
        
        `read_battery`
        
        __Response body__
        
        |  Name 	|Type   	|Boolean   	|
        |---	|---	|---	|
        |  capacity|   number|  The total capacity of the vehicle's battery (in kilowatt-hours). 	|
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetBatteryCapacityRequest, base_url, '/vehicles/{vehicle_id}/battery/capacity', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBatteryCapacityResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_battery_level(self, request: operations.GetBatteryLevelRequest) -> operations.GetBatteryLevelResponse:
        r"""EV Battery Level
        __Description__
        
        Retrieve EV battery level of a vehicle.
        
        __Permission__
        
        `read_battery`
        
        __Response body__
        
        |  Name 	|Type   	|Boolean   	|
        |---	|---	|---	|
        |  `percentRemaining`|   number|  An EV battery’s state of charge (in percent). 	|
        |   `range`|   number	|   The estimated remaining distance the vehicle can travel (in kilometers by default or in miles using the [sc-unit-system](https://smartcar.com/docs/api?version=v2.0&language=cURL#request-headers).	|
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetBatteryLevelRequest, base_url, '/vehicles/{vehicle_id}/battery', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBatteryLevelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_charging_status(self, request: operations.GetChargingStatusRequest) -> operations.GetChargingStatusResponse:
        r"""EV Charging Status
        __Description__
        
        Returns the current charge status of an electric vehicle.
        
        __Permission__
        
        `read_charge`
        
        __Response body__
        
        |  Name 	|Type   	|Boolean   	|
        |---	|---	|---	|
        |  `isPluggedIn` 	|   boolean	|  Indicates whether a charging cable is currently plugged into the vehicle’s charge port. 	|
        |   `state`	|   string	|   Indicates whether the vehicle is currently charging. Options: `CHARGING` `FULLY_CHARGED` `NOT_CHARGING`	|
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetChargingStatusRequest, base_url, '/vehicles/{vehicle_id}/charge', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetChargingStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    