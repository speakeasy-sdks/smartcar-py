"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from .capability import Capability
from .header import Header
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from smartcar import utils
from typing import List, Optional, Union

class SchemasSecurityReadChargingPortStatus(str, Enum):
    OPEN = 'OPEN'
    CLOSED = 'CLOSED'
    UNKNOWN = 'UNKNOWN'

class SchemasType(str, Enum):
    CHARGING_PORT = 'chargingPort'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SchemasChargingPort:
    status: Optional[SchemasSecurityReadChargingPortStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    type: Optional[SchemasType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    


class SchemasSecurityReadStatus(str, Enum):
    OPEN = 'OPEN'
    CLOSED = 'CLOSED'
    UNKNOWN = 'UNKNOWN'

class SchemasSecurityReadType(str, Enum):
    FRONT_LEFT = 'frontLeft'
    FRONT_RIGHT = 'frontRight'
    BACK_LEFT = 'backLeft'
    BACK_RIGHT = 'backRight'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SchemasDoors:
    status: Optional[SchemasSecurityReadStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    type: Optional[SchemasSecurityReadType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    


class SchemasSecurityReadStorageStatus(str, Enum):
    OPEN = 'OPEN'
    CLOSED = 'CLOSED'
    UNKNOWN = 'UNKNOWN'

class SchemasSecurityReadStorageType(str, Enum):
    REAR = 'rear'
    FRONT = 'front'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SchemasStorage:
    status: Optional[SchemasSecurityReadStorageStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    type: Optional[SchemasSecurityReadStorageType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    


class SchemasSecurityReadSunroofStatus(str, Enum):
    OPEN = 'OPEN'
    CLOSED = 'CLOSED'
    UNKNOWN = 'UNKNOWN'

class SchemasSecurityReadSunroofType(str, Enum):
    SUNROOF = 'sunroof'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SchemasSunroof:
    status: Optional[SchemasSecurityReadSunroofStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    type: Optional[SchemasSecurityReadSunroofType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    


class SchemasSecurityReadWindowsStatus(str, Enum):
    OPEN = 'OPEN'
    CLOSED = 'CLOSED'
    UNKNOWN = 'UNKNOWN'

class SchemasSecurityReadWindowsType(str, Enum):
    FRONT_LEFT = 'frontLeft'
    FRONT_RIGHT = 'frontRight'
    BACK_LEFT = 'backLeft'
    BACK_RIGHT = 'backRight'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SchemasWindows:
    status: Optional[SchemasSecurityReadWindowsStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    type: Optional[SchemasSecurityReadWindowsType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SecurityReadSchemas:
    charging_port: Optional[List[SchemasChargingPort]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chargingPort'), 'exclude': lambda f: f is None }})
    doors: Optional[List[SchemasDoors]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doors'), 'exclude': lambda f: f is None }})
    is_locked: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isLocked'), 'exclude': lambda f: f is None }})
    storage: Optional[List[SchemasStorage]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storage'), 'exclude': lambda f: f is None }})
    sunroof: Optional[List[SchemasSunroof]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sunroof'), 'exclude': lambda f: f is None }})
    windows: Optional[List[SchemasWindows]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('windows'), 'exclude': lambda f: f is None }})
    


class SchemasStatus(str, Enum):
    SUCCESS = 'SUCCESS'
    FAILED = 'FAILED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SuccessResponseSchemas:
    UNSET='__SPEAKEASY_UNSET__'
    message: Optional[str] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is SuccessResponseSchemas.UNSET }})
    status: Optional[SchemasStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UserInfoSchemas:
    r"""A user ID (UUID v4)."""
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VinInfoSchemas:
    r"""A vehicle’s manufacturer identifier."""
    vin: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vin'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CompatibilityResponseSchemas:
    UNSET='__SPEAKEASY_UNSET__'
    capabilities: Optional[List[Capability]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('capabilities'), 'exclude': lambda f: f is None }})
    compatible: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('compatible'), 'exclude': lambda f: f is None }})
    reason: Optional[str] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reason'), 'exclude': lambda f: f is CompatibilityResponseSchemas.UNSET }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Schemas:
    capacity: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('capacity'), 'exclude': lambda f: f is None }})
    r"""The total capacity of the vehicle's battery (in kilowatt-hours)."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BatteryLevelSchemas:
    percent_remaining: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('percentRemaining'), 'exclude': lambda f: f is None }})
    r"""An EV battery’s state of charge (in percent)."""
    range: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('range'), 'exclude': lambda f: f is None }})
    r"""The estimated remaining distance the vehicle can travel (in kilometers by default or in miles using the sc-unit-system)."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ChargeVoltageSchemas:
    voltage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voltage'), 'exclude': lambda f: f is None }})
    r"""The voltage of the charger measured by the vehicle."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ChargeTimeSchemas:
    time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'exclude': lambda f: f is None }})
    r"""The date and time the vehicle expects to complete this charging session."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ChargeLimitSchemas:
    limit: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('limit'), 'exclude': lambda f: f is None }})
    r"""The level at which the vehicle should stop charging and be considered fully charged (in percent)."""
    


class State(str, Enum):
    CHARGING = 'CHARGING'
    FULLY_CHARGED = 'FULLY_CHARGED'
    NOT_CHARGING = 'NOT_CHARGING'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ChargeStatusSchemas:
    is_plugged_in: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isPluggedIn'), 'exclude': lambda f: f is None }})
    r"""Indicates whether a charging cable is currently plugged into the vehicle’s charge port."""
    state: Optional[State] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EngineOilSchemas:
    life_remaining: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lifeRemaining'), 'exclude': lambda f: f is None }})
    r"""The engine oil’s remaining life span (as a percentage). Oil life is based on the current quality of the oil. (in percent)."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TirePressureSchemas:
    back_left: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backLeft'), 'exclude': lambda f: f is None }})
    r"""The current air pressure of the back left tire (in kilopascals by default or in pounds per square inch using the sc-unit-system)."""
    back_right: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backRight'), 'exclude': lambda f: f is None }})
    r"""The current air pressure of the back right tire (in kilopascals by default or in pounds per square inch using the sc-unit-system)."""
    front_left: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('frontLeft'), 'exclude': lambda f: f is None }})
    r"""The current air pressure of the front left tire (in kilopascals by default or in pounds per square inch using the sc-unit-system)."""
    front_right: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('frontRight'), 'exclude': lambda f: f is None }})
    r"""The current air pressure of the front right tire (in kilopascals by default or in pounds per square inch using the sc-unit-system)."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FuelTankSchemas:
    amount_remaining: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amountRemaining'), 'exclude': lambda f: f is None }})
    r"""The amount of fuel in the tank (in liters by default or in gallons (U.S.) using the sc-unit-system)."""
    percent_remaining: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('percentRemaining'), 'exclude': lambda f: f is None }})
    r"""The remaining level of fuel in the tank (in percent)."""
    range: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('range'), 'exclude': lambda f: f is None }})
    r"""The estimated remaining distance the car can travel (in kilometers by default or in miles using the sc-unit-system)."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OdometerSchemas:
    distance: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distance'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LocationSchemas:
    latitude: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latitude') }})
    longitude: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('longitude') }})
    


class Code(str, Enum):
    TWO_HUNDRED = '200'
    FIVE_HUNDRED = '500'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Response:
    UNSET='__SPEAKEASY_UNSET__'
    body: Optional[Union[LocationSchemas, OdometerSchemas, FuelTankSchemas, TirePressureSchemas, EngineOilSchemas, ChargeStatusSchemas, ChargeLimitSchemas, ChargeTimeSchemas, ChargeVoltageSchemas, BatteryLevelSchemas, Schemas, CompatibilityResponseSchemas, VinInfoSchemas, UserInfoSchemas, SuccessResponseSchemas, SecurityReadSchemas]] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('body'), 'exclude': lambda f: f is Response.UNSET }})
    code: Optional[Code] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    headers: Optional[List[Header]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('headers'), 'exclude': lambda f: f is None }})
    path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path'), 'exclude': lambda f: f is None }})
    

