"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import capability as shared_capability
from ..shared import header as shared_header
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from smartcar import utils
from typing import Optional, Union

class ResponseBodySecurityReadChargingPortStatus(str, Enum):
    OPEN = 'OPEN'
    CLOSED = 'CLOSED'
    UNKNOWN = 'UNKNOWN'

class ResponseBodySecurityReadChargingPortType(str, Enum):
    CHARGING_PORT = 'chargingPort'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class ResponseBodySecurityReadChargingPort:
    status: Optional[ResponseBodySecurityReadChargingPortStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    type: Optional[ResponseBodySecurityReadChargingPortType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    


class ResponseBodySecurityReadDoorsStatus(str, Enum):
    OPEN = 'OPEN'
    CLOSED = 'CLOSED'
    UNKNOWN = 'UNKNOWN'

class ResponseBodySecurityReadDoorsType(str, Enum):
    FRONT_LEFT = 'frontLeft'
    FRONT_RIGHT = 'frontRight'
    BACK_LEFT = 'backLeft'
    BACK_RIGHT = 'backRight'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class ResponseBodySecurityReadDoors:
    status: Optional[ResponseBodySecurityReadDoorsStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    type: Optional[ResponseBodySecurityReadDoorsType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    


class ResponseBodySecurityReadStorageStatus(str, Enum):
    OPEN = 'OPEN'
    CLOSED = 'CLOSED'
    UNKNOWN = 'UNKNOWN'

class ResponseBodySecurityReadStorageType(str, Enum):
    REAR = 'rear'
    FRONT = 'front'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class ResponseBodySecurityReadStorage:
    status: Optional[ResponseBodySecurityReadStorageStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    type: Optional[ResponseBodySecurityReadStorageType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    


class ResponseBodySecurityReadSunroofStatus(str, Enum):
    OPEN = 'OPEN'
    CLOSED = 'CLOSED'
    UNKNOWN = 'UNKNOWN'

class ResponseBodySecurityReadSunroofType(str, Enum):
    SUNROOF = 'sunroof'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class ResponseBodySecurityReadSunroof:
    status: Optional[ResponseBodySecurityReadSunroofStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    type: Optional[ResponseBodySecurityReadSunroofType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    


class ResponseBodySecurityReadWindowsStatus(str, Enum):
    OPEN = 'OPEN'
    CLOSED = 'CLOSED'
    UNKNOWN = 'UNKNOWN'

class ResponseBodySecurityReadWindowsType(str, Enum):
    FRONT_LEFT = 'frontLeft'
    FRONT_RIGHT = 'frontRight'
    BACK_LEFT = 'backLeft'
    BACK_RIGHT = 'backRight'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class ResponseBodySecurityReadWindows:
    status: Optional[ResponseBodySecurityReadWindowsStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    type: Optional[ResponseBodySecurityReadWindowsType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class ResponseBodySecurityRead:
    charging_port: Optional[list[ResponseBodySecurityReadChargingPort]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chargingPort'), 'exclude': lambda f: f is None }})
    doors: Optional[list[ResponseBodySecurityReadDoors]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doors'), 'exclude': lambda f: f is None }})
    is_locked: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isLocked'), 'exclude': lambda f: f is None }})
    storage: Optional[list[ResponseBodySecurityReadStorage]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storage'), 'exclude': lambda f: f is None }})
    sunroof: Optional[list[ResponseBodySecurityReadSunroof]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sunroof'), 'exclude': lambda f: f is None }})
    windows: Optional[list[ResponseBodySecurityReadWindows]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('windows'), 'exclude': lambda f: f is None }})
    


class ResponseBodySuccessResponseStatus(str, Enum):
    SUCCESS = 'SUCCESS'
    FAILED = 'FAILED'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class ResponseBodySuccessResponse:
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    status: Optional[ResponseBodySuccessResponseStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class ResponseBodyUserInfo:
    r"""A user ID (UUID v4)."""
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class ResponseBodyVinInfo:
    r"""A vehicle’s manufacturer identifier."""
    vin: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vin'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class ResponseBodyCompatibilityResponse:
    capabilities: Optional[list[shared_capability.Capability]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('capabilities'), 'exclude': lambda f: f is None }})
    compatible: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('compatible'), 'exclude': lambda f: f is None }})
    reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reason') }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class ResponseBodyBatteryCapacity:
    capacity: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('capacity'), 'exclude': lambda f: f is None }})
    r"""The total capacity of the vehicle's battery (in kilowatt-hours)."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class ResponseBodyBatteryLevel:
    percent_remaining: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('percentRemaining'), 'exclude': lambda f: f is None }})
    r"""An EV battery’s state of charge (in percent)."""
    range: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('range'), 'exclude': lambda f: f is None }})
    r"""The estimated remaining distance the vehicle can travel (in kilometers by default or in miles using the sc-unit-system)."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class ResponseBodyChargeVoltage:
    voltage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voltage'), 'exclude': lambda f: f is None }})
    r"""The voltage of the charger measured by the vehicle."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class ResponseBodyChargeTime:
    time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'exclude': lambda f: f is None }})
    r"""The date and time the vehicle expects to complete this charging session."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class ResponseBodyChargeLimit:
    limit: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('limit'), 'exclude': lambda f: f is None }})
    r"""The level at which the vehicle should stop charging and be considered fully charged (in percent)."""
    


class ResponseBodyChargeStatusState(str, Enum):
    CHARGING = 'CHARGING'
    FULLY_CHARGED = 'FULLY_CHARGED'
    NOT_CHARGING = 'NOT_CHARGING'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class ResponseBodyChargeStatus:
    is_plugged_in: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isPluggedIn'), 'exclude': lambda f: f is None }})
    r"""Indicates whether a charging cable is currently plugged into the vehicle’s charge port."""
    state: Optional[ResponseBodyChargeStatusState] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class ResponseBodyEngineOil:
    life_remaining: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lifeRemaining'), 'exclude': lambda f: f is None }})
    r"""The engine oil’s remaining life span (as a percentage). Oil life is based on the current quality of the oil. (in percent)."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class ResponseBodyTirePressure:
    back_left: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backLeft'), 'exclude': lambda f: f is None }})
    r"""The current air pressure of the back left tire (in kilopascals by default or in pounds per square inch using the sc-unit-system)."""
    back_right: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backRight'), 'exclude': lambda f: f is None }})
    r"""The current air pressure of the back right tire (in kilopascals by default or in pounds per square inch using the sc-unit-system)."""
    front_left: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('frontLeft'), 'exclude': lambda f: f is None }})
    r"""The current air pressure of the front left tire (in kilopascals by default or in pounds per square inch using the sc-unit-system)."""
    front_right: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('frontRight'), 'exclude': lambda f: f is None }})
    r"""The current air pressure of the front right tire (in kilopascals by default or in pounds per square inch using the sc-unit-system)."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class ResponseBodyFuelTank:
    amount_remaining: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amountRemaining'), 'exclude': lambda f: f is None }})
    r"""The amount of fuel in the tank (in liters by default or in gallons (U.S.) using the sc-unit-system)."""
    percent_remaining: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('percentRemaining'), 'exclude': lambda f: f is None }})
    r"""The remaining level of fuel in the tank (in percent)."""
    range: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('range'), 'exclude': lambda f: f is None }})
    r"""The estimated remaining distance the car can travel (in kilometers by default or in miles using the sc-unit-system)."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class ResponseBodyOdometer:
    distance: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distance'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class ResponseBodyLocation:
    latitude: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latitude') }})
    longitude: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('longitude') }})
    




@dataclasses.dataclass
class ResponseBody:
    pass

class ResponseCode(str, Enum):
    TWO_HUNDRED = '200'
    FIVE_HUNDRED = '500'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class Response:
    body: Optional[Union[ResponseBodyLocation, ResponseBodyOdometer, ResponseBodyFuelTank, ResponseBodyTirePressure, ResponseBodyEngineOil, ResponseBodyChargeStatus, ResponseBodyChargeLimit, ResponseBodyChargeTime, ResponseBodyChargeVoltage, ResponseBodyBatteryLevel, ResponseBodyBatteryCapacity, ResponseBodyCompatibilityResponse, ResponseBodyVinInfo, ResponseBodyUserInfo, ResponseBodySuccessResponse, ResponseBodySecurityRead]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('body') }})
    code: Optional[ResponseCode] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    headers: Optional[list[shared_header.Header]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('headers'), 'exclude': lambda f: f is None }})
    path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path'), 'exclude': lambda f: f is None }})
    

