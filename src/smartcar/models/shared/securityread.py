"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from smartcar import utils
from typing import List, Optional

class SecurityReadSchemasChargingPortStatus(str, Enum):
    OPEN = 'OPEN'
    CLOSED = 'CLOSED'
    UNKNOWN = 'UNKNOWN'

class Type(str, Enum):
    CHARGING_PORT = 'chargingPort'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ChargingPort:
    status: Optional[SecurityReadSchemasChargingPortStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    type: Optional[Type] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    


class SecurityReadStatus(str, Enum):
    OPEN = 'OPEN'
    CLOSED = 'CLOSED'
    UNKNOWN = 'UNKNOWN'

class SecurityReadType(str, Enum):
    FRONT_LEFT = 'frontLeft'
    FRONT_RIGHT = 'frontRight'
    BACK_LEFT = 'backLeft'
    BACK_RIGHT = 'backRight'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Doors:
    status: Optional[SecurityReadStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    type: Optional[SecurityReadType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    


class SecurityReadSchemasStatus(str, Enum):
    OPEN = 'OPEN'
    CLOSED = 'CLOSED'
    UNKNOWN = 'UNKNOWN'

class SecurityReadSchemasType(str, Enum):
    REAR = 'rear'
    FRONT = 'front'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Storage:
    status: Optional[SecurityReadSchemasStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    type: Optional[SecurityReadSchemasType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    


class SecurityReadSchemasSunroofStatus(str, Enum):
    OPEN = 'OPEN'
    CLOSED = 'CLOSED'
    UNKNOWN = 'UNKNOWN'

class SecurityReadSchemasSunroofType(str, Enum):
    SUNROOF = 'sunroof'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Sunroof:
    status: Optional[SecurityReadSchemasSunroofStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    type: Optional[SecurityReadSchemasSunroofType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    


class SecurityReadSchemasWindowsStatus(str, Enum):
    OPEN = 'OPEN'
    CLOSED = 'CLOSED'
    UNKNOWN = 'UNKNOWN'

class SecurityReadSchemasWindowsType(str, Enum):
    FRONT_LEFT = 'frontLeft'
    FRONT_RIGHT = 'frontRight'
    BACK_LEFT = 'backLeft'
    BACK_RIGHT = 'backRight'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Windows:
    status: Optional[SecurityReadSchemasWindowsStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    type: Optional[SecurityReadSchemasWindowsType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SecurityRead:
    charging_port: Optional[List[ChargingPort]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chargingPort'), 'exclude': lambda f: f is None }})
    doors: Optional[List[Doors]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doors'), 'exclude': lambda f: f is None }})
    is_locked: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isLocked'), 'exclude': lambda f: f is None }})
    storage: Optional[List[Storage]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storage'), 'exclude': lambda f: f is None }})
    sunroof: Optional[List[Sunroof]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sunroof'), 'exclude': lambda f: f is None }})
    windows: Optional[List[Windows]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('windows'), 'exclude': lambda f: f is None }})
    

