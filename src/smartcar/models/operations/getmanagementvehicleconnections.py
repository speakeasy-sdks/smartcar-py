"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import connectionsresponse as shared_connectionsresponse
from typing import Optional

GET_MANAGEMENT_VEHICLE_CONNECTIONS_SERVERS = [
	"https://management.smartcar.com/v2.0",
    r"""Smartcar's Vehicle Management API"""
]



@dataclasses.dataclass
class GetManagementVehicleConnectionsSecurity:
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})
    




@dataclasses.dataclass
class GetManagementVehicleConnectionsRequest:
    cursor: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'cursor', 'style': 'form', 'explode': True }})
    r"""Used for accessing pages other than the first page. Each page returned has a cursor value that can be passed here to fetch the “next” page."""
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Number of connections to return (default: 10, maximum: 100)."""
    user_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'user_id', 'style': 'form', 'explode': True }})
    r"""Filter for connections created by the provider user ID."""
    vehicle_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'vehicle_id', 'style': 'form', 'explode': True }})
    r"""Filter for connections to the provided vehicle ID."""
    




@dataclasses.dataclass
class GetManagementVehicleConnectionsResponse:
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    connections_response: Optional[shared_connectionsresponse.ConnectionsResponse] = dataclasses.field(default=None)
    r"""returns vehicle connections"""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    

